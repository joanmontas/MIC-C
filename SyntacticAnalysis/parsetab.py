
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEleftEQUALrightUMINUSnonassocLPARENRPARENASSIGN DIVIDE ELSE EQUAL IDENT IF LCURL LESSER LPAREN MINUS NUMBER PLUS RCURL RPAREN SEMICOLON STRING TIMES TYPE WHILEstatements : statementstatements : statement statementsstatement : expression SEMICOLONstatement : TYPE IDENT ASSIGN expression SEMICOLONstatement : IDENT ASSIGN expression SEMICOLONstatement : LCURL statements RCURLstatement : IF LPAREN expression RPAREN LCURL statements RCURL SEMICOLONstatement : IF LPAREN expression RPAREN LCURL statements RCURL ELSE LCURL statements RCURL SEMICOLONstatement : WHILE LPAREN expression RPAREN LCURL statements RCURL SEMICOLONexpression : IDENTexpression : TYPEexpression : NUMBERexpression : STRINGexpression : expression PLUS expression\n                      | expression MINUS expression\n                      | expression TIMES expression\n                      | expression DIVIDE expression\n                      | expression LESSER expression\n                      | expression EQUAL expressionexpression : MINUS NUMBER %prec UMINUSstatement : TIMES statement %prec UMINUSexpression : LPAREN expression RPAREN'
    
_lr_action_items = {'TYPE':([0,2,6,8,10,15,16,17,18,19,20,21,23,25,29,30,38,40,45,48,49,50,55,57,58,61,],[4,4,4,28,4,-3,28,28,28,28,28,28,28,28,28,-21,28,-6,-5,-4,4,4,-7,-9,4,-8,]),'IDENT':([0,2,4,6,8,10,15,16,17,18,19,20,21,23,25,29,30,38,40,45,48,49,50,55,57,58,61,],[5,5,22,5,27,5,-3,27,27,27,27,27,27,27,27,27,-21,27,-6,-5,-4,5,5,-7,-9,5,-8,]),'LCURL':([0,2,6,10,15,30,40,45,46,47,48,49,50,55,56,57,58,61,],[6,6,6,6,-3,-21,-6,-5,49,50,-4,6,6,-7,58,-9,6,-8,]),'IF':([0,2,6,10,15,30,40,45,48,49,50,55,57,58,61,],[7,7,7,7,-3,-21,-6,-5,-4,7,7,-7,-9,7,-8,]),'WHILE':([0,2,6,10,15,30,40,45,48,49,50,55,57,58,61,],[9,9,9,9,-3,-21,-6,-5,-4,9,9,-7,-9,9,-8,]),'TIMES':([0,2,3,4,5,6,10,11,12,15,26,27,28,30,31,32,33,34,35,36,37,39,40,41,42,43,44,45,48,49,50,55,57,58,61,],[10,10,18,-11,-10,10,10,-12,-13,-3,18,-10,-11,-21,-20,18,18,-16,-17,18,-19,18,-6,18,-22,18,18,-5,-4,10,10,-7,-9,10,-8,]),'NUMBER':([0,2,6,8,10,13,15,16,17,18,19,20,21,23,25,29,30,38,40,45,48,49,50,55,57,58,61,],[11,11,11,11,11,31,-3,11,11,11,11,11,11,11,11,11,-21,11,-6,-5,-4,11,11,-7,-9,11,-8,]),'STRING':([0,2,6,8,10,15,16,17,18,19,20,21,23,25,29,30,38,40,45,48,49,50,55,57,58,61,],[12,12,12,12,12,-3,12,12,12,12,12,12,12,12,12,-21,12,-6,-5,-4,12,12,-7,-9,12,-8,]),'MINUS':([0,2,3,4,5,6,8,10,11,12,15,16,17,18,19,20,21,23,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,48,49,50,55,57,58,61,],[13,13,17,-11,-10,13,13,13,-12,-13,-3,13,13,13,13,13,13,13,13,17,-10,-11,13,-21,-20,-14,-15,-16,-17,17,-19,13,17,-6,17,-22,17,17,-5,-4,13,13,-7,-9,13,-8,]),'LPAREN':([0,2,6,7,8,9,10,15,16,17,18,19,20,21,23,25,29,30,38,40,45,48,49,50,55,57,58,61,],[8,8,8,25,8,29,8,-3,8,8,8,8,8,8,8,8,8,-21,8,-6,-5,-4,8,8,-7,-9,8,-8,]),'$end':([1,2,14,15,30,40,45,48,55,57,61,],[0,-1,-2,-3,-21,-6,-5,-4,-7,-9,-8,]),'RCURL':([2,14,15,24,30,40,45,48,51,52,55,57,59,61,],[-1,-2,-3,40,-21,-6,-5,-4,53,54,-7,-9,60,-8,]),'SEMICOLON':([3,4,5,11,12,27,28,31,32,33,34,35,36,37,39,42,44,53,54,60,],[15,-11,-10,-12,-13,-10,-11,-20,-14,-15,-16,-17,-18,-19,45,-22,48,55,57,61,]),'PLUS':([3,4,5,11,12,26,27,28,31,32,33,34,35,36,37,39,41,42,43,44,],[16,-11,-10,-12,-13,16,-10,-11,-20,-14,-15,-16,-17,16,-19,16,16,-22,16,16,]),'DIVIDE':([3,4,5,11,12,26,27,28,31,32,33,34,35,36,37,39,41,42,43,44,],[19,-11,-10,-12,-13,19,-10,-11,-20,19,19,-16,-17,19,-19,19,19,-22,19,19,]),'LESSER':([3,4,5,11,12,26,27,28,31,32,33,34,35,36,37,39,41,42,43,44,],[20,-11,-10,-12,-13,20,-10,-11,-20,-14,-15,-16,-17,20,-19,20,20,-22,20,20,]),'EQUAL':([3,4,5,11,12,26,27,28,31,32,33,34,35,36,37,39,41,42,43,44,],[21,-11,-10,-12,-13,21,-10,-11,-20,21,21,21,21,21,-19,21,21,-22,21,21,]),'ASSIGN':([5,22,],[23,38,]),'RPAREN':([11,12,26,27,28,31,32,33,34,35,36,37,41,42,43,],[-12,-13,42,-10,-11,-20,-14,-15,-16,-17,-18,-19,46,-22,47,]),'ELSE':([53,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,2,6,49,50,58,],[1,14,24,51,52,59,]),'statement':([0,2,6,10,49,50,58,],[2,2,2,30,2,2,2,]),'expression':([0,2,6,8,10,16,17,18,19,20,21,23,25,29,38,49,50,58,],[3,3,3,26,3,32,33,34,35,36,37,39,41,43,44,3,3,3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statements","S'",1,None,None,None),
  ('statements -> statement','statements',1,'p_statements_single','SyntacticAnalyzer.py',59),
  ('statements -> statement statements','statements',2,'p_statements_multi','SyntacticAnalyzer.py',64),
  ('statement -> expression SEMICOLON','statement',2,'p_statement_expression','SyntacticAnalyzer.py',68),
  ('statement -> TYPE IDENT ASSIGN expression SEMICOLON','statement',5,'p_statement_declare_assign','SyntacticAnalyzer.py',72),
  ('statement -> IDENT ASSIGN expression SEMICOLON','statement',4,'p_statement_reassign','SyntacticAnalyzer.py',76),
  ('statement -> LCURL statements RCURL','statement',3,'p_statement_block','SyntacticAnalyzer.py',80),
  ('statement -> IF LPAREN expression RPAREN LCURL statements RCURL SEMICOLON','statement',8,'p_statement_IF','SyntacticAnalyzer.py',84),
  ('statement -> IF LPAREN expression RPAREN LCURL statements RCURL ELSE LCURL statements RCURL SEMICOLON','statement',12,'p_statement_IF_ELSE','SyntacticAnalyzer.py',88),
  ('statement -> WHILE LPAREN expression RPAREN LCURL statements RCURL SEMICOLON','statement',8,'p_statement_WHILE','SyntacticAnalyzer.py',92),
  ('expression -> IDENT','expression',1,'p_expression_ident','SyntacticAnalyzer.py',96),
  ('expression -> TYPE','expression',1,'p_expression_type','SyntacticAnalyzer.py',100),
  ('expression -> NUMBER','expression',1,'p_expression_number','SyntacticAnalyzer.py',104),
  ('expression -> STRING','expression',1,'p_expression_string','SyntacticAnalyzer.py',108),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','SyntacticAnalyzer.py',112),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','SyntacticAnalyzer.py',113),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','SyntacticAnalyzer.py',114),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','SyntacticAnalyzer.py',115),
  ('expression -> expression LESSER expression','expression',3,'p_expression_binop','SyntacticAnalyzer.py',116),
  ('expression -> expression EQUAL expression','expression',3,'p_expression_binop','SyntacticAnalyzer.py',117),
  ('expression -> MINUS NUMBER','expression',2,'p_expression_uminus','SyntacticAnalyzer.py',121),
  ('statement -> TIMES statement','statement',2,'p_expression_unary_times','SyntacticAnalyzer.py',125),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','SyntacticAnalyzer.py',129),
]
